#include<iostream>
#include <fstream>
#include <time.h>
#include<gmpxx.h>
#include <string>
// #include<gmp.h>
#include <vector>
#include <map>
#include <time.h>
using namespace std;

struct A;

mpz_class F(int n);
void FF(int n, A* result);
mpz_class Power(mpz_class base, int exp);
mpz_class TMap(vector<int> list);
mpz_class T(int n);

struct A{
    int power = 0;
    vector<int> TList;
    long FTail = 1;
};
map<int, long> F_CONST = {
    {1, 1},
    {2, 2},
    {3, 6},
    {4, 24},
    {5, 120},
    {6, 720},
    {7, 5040},
    {8, 40320},
    {9, 362880},
    {10, 3628800},
    {11, 39916800},
    {12, 479001600},
    {13, 6227020800},
    {14, 87178291200},
    {15, 1307674368000},
    {16, 20922789888000},
    {17, 355687428096000},
    {18, 6402373705728000},
    {19, 121645100408832000},
    {20, 2432902008176640000},
};

int main()
{
    
    int n;
    while(1) {
        cout<<"请输入整数："<<endl;
        cin>>n;
        clock_t begin = clock();
        mpz_class res = F(n);
        clock_t finish = clock();
        double costTime = (double)(finish-begin)/CLOCKS_PER_SEC;
        // 50w耗时5s;
        // cout<<"阶乘结果："<<res<<endl;
        ofstream fout("factor02_"+to_string(n)+".txt");
        fout <<res;  //将变量的值写入文件
        fout.close();                  //关闭文件
        cout<<n<<"的阶乘耗时："<<costTime<<endl;
    }
    return 0;
}


mpz_class F(int n)
{
    A* result = new A;
    
    FF(n, result);
    // cout<<result->power<<endl;
    // for (int i = 0; i < result->TList.size(); i++)
    // {
    //     cout<<result->TList[i]<<endl;
    // }
    // cout<<result->FTail<<endl;
    // return result->FTail;
    mpz_class total = TMap(result->TList);
    mpz_class powerTotal = Power(2, result->power);
    // cout<<"total::::"<<total<<endl;
    // cout<<"FTail::::"<<result->FTail<<endl;
    // cout<<"power::::"<<powerTotal<<endl;
    // cout<<""<<total*powerTotal;
    return powerTotal * total * result->FTail;
}

void FF(int n, A* result)
{
    if(F_CONST.find(n) != F_CONST.end()) {
        result->FTail = F_CONST[n];
        return;
    }
    int k = n>>1;
    result->power += k;
    result->TList.push_back(n & 0x01 ? n: n-1);
    FF(k, result);
}

mpz_class TMap(vector<int> list)
{
    // vector<mpz_class> groups;
    mpz_class res = 1;
    int size = list.size();
    for (int i = 0; i < size; i++)
    {
        res *= T(list[i]);
        // groups.push_back(T(list[i]));
    }
    return res;
}

/**
 * 
 * @param n 为奇数
 * return n * (n-2) * (n-4) * ... * (2 or 1)
 */
mpz_class T(int n) {
    mpz_class base = 1;
    while(n > 0) {
        base *= n;
        n -= 2;
    }
    return base;
}

mpz_class Power(mpz_class base, int exp)
{
    mpz_class result = 1;
    while(exp > 0) {
        if(exp % 2 == 1)
            result *= base;
        base *= base;
        exp >>= 1;
    }
    return result;
}

// 1000! = 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

